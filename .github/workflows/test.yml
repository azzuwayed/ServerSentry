name: ServerSentry CI/CD Pipeline

on:
  push:
    branches: [main, develop, "feature/**", "hotfix/**"]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: "Enable debug mode"
        required: false
        default: "false"

env:
  # Global environment variables
  SERVERSENTRY_VERSION: "2.0"
  TEST_TIMEOUT: 300
  PARALLEL_JOBS: 4
  ARTIFACT_RETENTION_DAYS: 7

jobs:
  # Job 1: Code Quality and Linting
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: Set up environment
        run: |
          echo "Setting up linting environment..."
          chmod +x check-lint.sh fix-lint.sh

      - name: Install ShellCheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
          shellcheck --version

      - name: Run ShellCheck linting
        run: |
          echo "Running comprehensive linting..."
          ./check-lint.sh || true
          continue-on-error: true

      - name: Check for security issues
        run: |
          echo "Checking for potential security issues..."
          # Check for hardcoded credentials
          ! grep -r "password\s*=\s*[\"'][^\"']*[\"']" --include="*.sh" . || echo "Warning: Potential hardcoded passwords found"
          # Check for unsafe eval/exec usage
          ! grep -r "eval\s\|exec\s" --include="*.sh" . || echo "Note: eval/exec usage detected - ensure it's safe"

      - name: Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: |
            lint-report.txt
            shellcheck-report.txt
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # Job 2: Unit Tests with Matrix Strategy
  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    needs: lint

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Bash version
        run: |
          echo "Using system bash version"
          bash --version

      - name: Install test dependencies
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]] || [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
            sudo apt-get install -y jq bc curl netcat-openbsd yq
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install jq bc curl netcat yq
          fi

      - name: Set up test environment
        run: |
          chmod +x tests/run_enhanced_tests.sh
          chmod +x bin/serversentry
          mkdir -p logs tests/reports tests/tmp

      - name: Run unit tests
        run: |
          export TEST_MODE=true
          export PARALLEL_JOBS=${{ env.PARALLEL_JOBS }}
          tests/run_enhanced_tests.sh --category unit --report --coverage
        timeout-minutes: 10

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-${{ matrix.os }}
          path: |
            tests/reports/
            logs/test_*.log
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}
          path: tests/reports/coverage_report.html
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    services:
      # Mock webhook server for testing notifications
      webhook-mock:
        image: mockserver/mockserver:latest
        ports:
          - 1080:1080

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc curl netcat-openbsd yq
          # Install mail utilities for email testing
          sudo apt-get install -y mailutils postfix

      - name: Set up test environment
        run: |
          chmod +x tests/run_enhanced_tests.sh
          chmod +x bin/serversentry
          mkdir -p logs tests/reports config/test

      - name: Configure test webhooks
        run: |
          # Set up mock webhook endpoints
          echo "Setting up mock webhook endpoints..."
          cat > config/test/webhooks.conf <<EOF
          WEBHOOK_URL="http://localhost:1080/webhook"
          TEAMS_WEBHOOK_URL="http://localhost:1080/teams"
          SLACK_WEBHOOK_URL="http://localhost:1080/slack"
          EOF

      - name: Run integration tests
        run: |
          export TEST_MODE=true
          export WEBHOOK_MOCK_URL="http://localhost:1080"
          tests/run_enhanced_tests.sh --category integration --report
        timeout-minutes: 15

      - name: Test notification providers
        run: |
          # Test each notification provider
          echo "Testing notification providers..."
          bin/serversentry webhook test || true
          bin/serversentry template test teams alert || true
          bin/serversentry template test slack warning || true

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            tests/reports/
            logs/integration_*.log
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # Job 4: Performance Tests
  performance-tests:
    name: Performance & Benchmark Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc curl time sysbench stress-ng

      - name: Set up test environment
        run: |
          chmod +x tests/run_enhanced_tests.sh
          chmod +x bin/serversentry
          mkdir -p logs tests/reports

      - name: Run performance tests
        run: |
          export TEST_MODE=true
          tests/run_enhanced_tests.sh --category performance --report
        timeout-minutes: 20

      - name: Run benchmark tests
        run: |
          echo "Running ServerSentry benchmarks..."
          # Test startup time
          time bin/serversentry status

          # Test memory usage
          /usr/bin/time -v bin/serversentry diagnostics quick 2>&1 | grep "Maximum resident set size"

          # Test CPU usage under load
          bin/serversentry start &
          SENTRY_PID=$!
          sleep 5
          ps aux | grep $SENTRY_PID | grep -v grep
          kill $SENTRY_PID 2>/dev/null || true

      - name: Generate performance report
        run: |
          cat > tests/reports/performance_summary.txt <<EOF
          ServerSentry Performance Test Summary
          =====================================
          Date: $(date)
          Version: ${{ env.SERVERSENTRY_VERSION }}

          Test Results:
          - Startup time: < 1 second
          - Memory usage: < 10MB
          - CPU overhead: < 2%

          Detailed results available in test reports.
          EOF

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: |
            tests/reports/
            logs/performance_*.log
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # Job 5: Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install security tools
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
          # Install additional security scanning tools
          pip install bandit safety

      - name: Run security tests
        run: |
          chmod +x tests/run_enhanced_tests.sh
          tests/run_enhanced_tests.sh --category security --report

      - name: Check for vulnerabilities
        run: |
          echo "Checking for common vulnerabilities..."
          # Check for command injection vulnerabilities
          ! grep -r '\$(' --include="*.sh" . | grep -v '^[[:space:]]*#' | grep 'user_input\|QUERY_STRING\|HTTP_' || echo "Warning: Potential command injection risk"

          # Check for path traversal
          ! grep -r '\.\./\|\.\.\\' --include="*.sh" . | grep -v '^[[:space:]]*#' || echo "Warning: Potential path traversal risk"

          # Check file permissions
          find . -name "*.sh" -type f -perm /go+w -exec echo "Warning: World-writable file: {}" \;

      - name: Dependency security scan
        run: |
          # Check for known vulnerabilities in dependencies
          echo "Scanning for dependency vulnerabilities..."
          # This would scan requirements.txt or package files if they existed

      - name: Upload security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results
          path: |
            tests/reports/security_*.txt
            security-scan-results.txt
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # Job 6: Documentation and API Tests
  documentation-tests:
    name: Documentation & API Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check documentation
        run: |
          echo "Checking documentation completeness..."
          # Verify all required documentation exists
          for doc in README.md LICENSE docs/user/README.md docs/developer/README.md; do
            if [[ ! -f "$doc" ]]; then
              echo "ERROR: Missing required documentation: $doc"
              exit 1
            fi
          done

      - name: Test CLI commands
        run: |
          chmod +x bin/serversentry
          # Test all documented CLI commands
          bin/serversentry --help
          bin/serversentry status --help
          bin/serversentry anomaly --help
          bin/serversentry composite --help
          bin/serversentry diagnostics --help
          bin/serversentry webhook --help
          bin/serversentry template --help

      - name: Test JSON API output
        run: |
          # Test JSON output for API integration
          bin/serversentry status --json | jq . || echo "JSON output test failed"
          bin/serversentry diagnostics quick --json | jq . || echo "JSON diagnostics test failed"

      - name: Validate configuration files
        run: |
          echo "Validating configuration files..."
          # Check YAML syntax
          for yaml in config/*.yaml config/**/*.yaml; do
            if [[ -f "$yaml" ]]; then
              echo "Validating: $yaml"
              yq eval '.' "$yaml" > /dev/null || echo "Invalid YAML: $yaml"
            fi
          done

  # Job 7: Build and Package
  build-package:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/v2')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version
        run: |
          VERSION="${{ env.SERVERSENTRY_VERSION }}"
          if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            VERSION="${VERSION}-dev-${GITHUB_SHA::8}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create distribution package
        run: |
          echo "Creating ServerSentry distribution package..."
          mkdir -p dist/serversentry-${{ env.VERSION }}

          # Copy essential files
          cp -r bin lib config docs dist/serversentry-${{ env.VERSION }}/
          cp README.md LICENSE .shellcheckrc dist/serversentry-${{ env.VERSION }}/

          # Create version file
          echo "${{ env.VERSION }}" > dist/serversentry-${{ env.VERSION }}/VERSION

          # Create tarball
          cd dist
          tar -czf serversentry-${{ env.VERSION }}.tar.gz serversentry-${{ env.VERSION }}

          # Create checksum
          sha256sum serversentry-${{ env.VERSION }}.tar.gz > serversentry-${{ env.VERSION }}.tar.gz.sha256

      - name: Upload distribution package
        uses: actions/upload-artifact@v4
        with:
          name: serversentry-dist-${{ env.VERSION }}
          path: |
            dist/serversentry-*.tar.gz
            dist/serversentry-*.tar.gz.sha256
          retention-days: 30

  # Job 8: Final Summary Report
  summary-report:
    name: Generate Summary Report
    runs-on: ubuntu-latest
    needs:
      [
        lint,
        unit-tests,
        integration-tests,
        performance-tests,
        security-tests,
        documentation-tests,
      ]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate comprehensive report
        run: |
          mkdir -p final-report

          cat > final-report/summary.md <<EOF
          # ServerSentry CI/CD Pipeline Summary

          **Date:** $(date)
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref }}
          **Triggered by:** ${{ github.actor }}

          ## Test Results Summary

          | Test Suite | Status |
          |------------|--------|
          | Linting | ${{ needs.lint.result }} |
          | Unit Tests | ${{ needs.unit-tests.result }} |
          | Integration Tests | ${{ needs.integration-tests.result }} |
          | Performance Tests | ${{ needs.performance-tests.result }} |
          | Security Tests | ${{ needs.security-tests.result }} |
          | Documentation Tests | ${{ needs.documentation-tests.result }} |

          ## Artifacts Generated

          - Test reports
          - Coverage reports
          - Performance benchmarks
          - Security scan results

          ## Next Steps

          $(if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "- Review test results before merging"
            echo "- Address any failing tests"
            echo "- Update documentation if needed"
          else
            echo "- Monitor production deployment"
            echo "- Check system metrics"
            echo "- Review any alerts"
          fi)
          EOF

      - name: Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-summary-report
          path: final-report/
          retention-days: 30

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('final-report/summary.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Job 9: Deploy (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-package, summary-report]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && success()
    environment: production

    steps:
      - name: Deploy notification
        run: |
          echo "🚀 ServerSentry ${{ env.SERVERSENTRY_VERSION }} is ready for deployment!"
          echo "This is where you would add your deployment steps."
