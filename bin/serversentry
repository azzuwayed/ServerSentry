#!/usr/bin/env bash
#
# ServerSentry v2 - Main Executable
#
# This is the main entry point for the ServerSentry application

set -eo pipefail

# Get the base directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
BASE_DIR="$(dirname "$SCRIPT_DIR")"

# Early argument parsing for log level settings
for arg in "$@"; do
  case "$arg" in
  -q | --quiet)
    export CURRENT_LOG_LEVEL=3 # ERROR level
    ;;
  -v | --verbose | -d | --debug)
    export CURRENT_LOG_LEVEL=0 # DEBUG level
    ;;
  esac
done

# Source compatibility utilities first
source "$BASE_DIR/lib/core/utils/compat_utils.sh"

# Source core components in proper order
source "$BASE_DIR/lib/core/logging.sh" # Load logging first
source "$BASE_DIR/lib/core/utils.sh"   # Load utilities second
source "$BASE_DIR/lib/core/config.sh"  # Load config third

# Initialize logging system first
if ! logging_init; then
  echo "FATAL: Failed to initialize logging system" >&2
  exit 1
fi

# Run startup optimizations
if declare -f util_performance_optimize_startup >/dev/null 2>&1; then
  util_performance_optimize_startup
fi

# Load configuration with new standardized function
if ! config_load; then
  log_error "Failed to load configuration"
  exit 1
fi

# Source remaining components
source "$BASE_DIR/lib/core/plugin.sh"
source "$BASE_DIR/lib/core/notification.sh"
source "$BASE_DIR/lib/ui/cli/commands.sh"

# Main function with enhanced error handling
main() {
  # Initialize the application with proper logging
  log_debug "Starting ServerSentry v2"
  log_debug "Base directory: $BASE_DIR"
  log_debug "Configuration loaded from: $(config_get_value 'config_file' 'default')"

  # Initialize plugin system with new standardized function
  if ! plugin_system_init; then
    log_error "Failed to initialize plugin system"
    exit 1
  fi

  # Initialize notification system with new standardized function
  if ! notification_system_init; then
    log_error "Failed to initialize notification system"
    # Non-fatal error, continue without notifications
    log_warning "Continuing without notification support"
  else
    log_debug "Notification system initialized successfully"
  fi

  # Log system status only for status, help, or debug commands
  local command="${1:-status}"
  if [[ "$command" == "status" || "$command" == "help" || "$command" == "-d" || "$command" == "--debug" ]]; then
    log_debug "System Status:"
    log_debug "- Log Level: $(logging_get_level)"
    log_debug "- Config Namespace: $(config_get_value 'namespace' 'config')"

    # Display enabled plugins (handle array properly)
    local enabled_plugins
    enabled_plugins=$(config_get_array 'plugins.enabled' | tr '\n' ',' | sed 's/,$//')
    if [[ -n "$enabled_plugins" ]]; then
      log_debug "- Plugins Enabled: $enabled_plugins"
    else
      log_debug "- Plugins Enabled: none"
    fi

    log_debug "- Notifications Enabled: $(config_get_value 'notifications.enabled' 'false')"
  fi

  # Process command line arguments
  if ! process_commands "$@"; then
    log_error "Command processing failed"
    exit 1
  fi

  log_debug "ServerSentry v2 finished successfully"
}

# Trap for cleanup
cleanup() {
  local exit_code=$?
  log_debug "Performing cleanup (exit code: $exit_code)"

  # Add any cleanup operations here
  if [[ "$exit_code" -ne 0 ]]; then
    log_error "ServerSentry exited with error code: $exit_code"
  fi

  exit "$exit_code"
}

# Set up signal handlers
trap cleanup EXIT
trap 'log_warning "Received SIGINT, shutting down..."; exit 130' INT
trap 'log_warning "Received SIGTERM, shutting down..."; exit 143' TERM

# Run the main function with all arguments
main "$@"
