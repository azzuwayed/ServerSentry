#!/usr/bin/env bash
#
# ServerSentry v2 - Main Executable
#
# This is the main entry point for the ServerSentry application

set -eo pipefail

# Check for minimal mode flag
MINIMAL_MODE=false
for arg in "$@"; do
  case "$arg" in
  --minimal)
    MINIMAL_MODE=true
    shift
    ;;
  esac
done

# Load ServerSentry environment bootstrap
if [[ -z "${SERVERSENTRY_ENV_LOADED:-}" ]]; then
  bootstrap_file="$(dirname "${BASH_SOURCE[0]}")/../serversentry-env.sh"
  if [[ -f "$bootstrap_file" ]]; then
    # Set initialization level based on mode
    if [[ "$MINIMAL_MODE" == "true" ]]; then
      export SERVERSENTRY_AUTO_INIT=false
      export SERVERSENTRY_MINIMAL_MODE=true
    else
      export SERVERSENTRY_AUTO_INIT=false
    fi
    # shellcheck source=../serversentry-env.sh
    source "$bootstrap_file" || {
      echo "FATAL: Failed to load ServerSentry environment bootstrap" >&2
      exit 1
    }
  else
    echo "FATAL: ServerSentry environment bootstrap not found: $bootstrap_file" >&2
    exit 1
  fi
fi

# Early argument parsing for log level settings
for arg in "$@"; do
  case "$arg" in
  -q | --quiet)
    export CURRENT_LOG_LEVEL=3 # ERROR level
    ;;
  -v | --verbose | -d | --debug)
    export CURRENT_LOG_LEVEL=0 # DEBUG level
    ;;
  esac
done

# === CORE SYSTEM INITIALIZATION ===

# Function: init_core_system
# Description: Initialize core system components using bootstrap
# Returns:
#   0 - success
#   1 - failure
init_core_system() {
  # Verify bootstrap functions are available
  if ! declare -f serversentry_init >/dev/null 2>&1; then
    echo "FATAL: Bootstrap functions not available" >&2
    return 1
  fi

  # Initialize based on mode
  local init_level="minimal"
  if [[ "$MINIMAL_MODE" != "true" ]]; then
    init_level="standard"
  fi

  if ! serversentry_init "$init_level"; then
    echo "FATAL: Failed to initialize ServerSentry $init_level system" >&2
    return 1
  fi

  # In minimal mode, only load essential core libraries
  if [[ "$MINIMAL_MODE" == "true" ]]; then
    echo "Loading minimal core libraries..."
    # Only load absolutely essential functions
    if ! serversentry_load_minimal; then
      echo "FATAL: Failed to load minimal core libraries" >&2
      return 1
    fi
  else
    echo "Loading core libraries..."
    # Load full core libraries
    if ! serversentry_load_core; then
      echo "FATAL: Failed to load core libraries" >&2
      return 1
    fi
  fi

  # Verify critical functions are available
  if ! declare -f serversentry_log >/dev/null 2>&1; then
    echo "FATAL: Bootstrap logging system not available" >&2
    return 1
  fi

  if ! declare -f config_get_value >/dev/null 2>&1; then
    serversentry_log "WARN" "Configuration system not available, continuing with defaults"
  fi

  local mode_text="standard"
  if [[ "$MINIMAL_MODE" == "true" ]]; then
    mode_text="minimal"
  fi
  serversentry_log "SUCCESS" "Core system initialized successfully in $mode_text mode"
  return 0
}

# Function: init_plugin_system
# Description: Initialize the plugin management system
# Returns:
#   0 - success
#   1 - failure
init_plugin_system() {
  # Skip plugins in minimal mode
  if [[ "$MINIMAL_MODE" == "true" ]]; then
    serversentry_log "INFO" "Skipping plugin system in minimal mode"
    return 0
  fi

  # Load plugin module using bootstrap
  if ! serversentry_load_module "plugin"; then
    serversentry_log "ERROR" "Failed to load plugin system module"
    return 1
  fi

  if ! plugin_system_init; then
    serversentry_log "ERROR" "Failed to initialize plugin system"
    return 1
  fi

  serversentry_log "INFO" "Plugin system initialized successfully"
  return 0
}

# Function: init_notification_system
# Description: Initialize the notification system
# Returns:
#   0 - success
#   1 - failure (non-fatal)
init_notification_system() {
  # Skip notifications in minimal mode
  if [[ "$MINIMAL_MODE" == "true" ]]; then
    serversentry_log "INFO" "Skipping notification system in minimal mode"
    return 0
  fi

  # Try to load notification module using bootstrap
  if ! serversentry_load_module "notification"; then
    serversentry_log "WARN" "Notification system not available - continuing without notifications"
    return 1
  fi

  if ! notification_system_init; then
    serversentry_log "WARN" "Failed to initialize notification system - continuing without notifications"
    return 1
  fi

  serversentry_log "INFO" "Notification system initialized successfully"
  return 0
}

# Function: init_ui_system
# Description: Initialize the user interface system
# Returns:
#   0 - success
#   1 - failure
init_ui_system() {
  # Load UI commands using standardized path
  local ui_commands="$SERVERSENTRY_UI_DIR/cli/commands.sh"
  if [[ -f "$ui_commands" ]]; then
    # shellcheck source=/dev/null
    source "$ui_commands"
    serversentry_log "INFO" "UI system initialized successfully"
    return 0
  else
    serversentry_log "ERROR" "UI system not found: $ui_commands"
    return 1
  fi
}

# Function: run_startup_optimizations
# Description: Run performance optimizations during startup
run_startup_optimizations() {
  # Run performance optimizations if available
  if declare -f util_performance_optimize_startup >/dev/null 2>&1; then
    util_performance_optimize_startup
  fi

  # Pre-cache common commands for better performance
  if declare -f util_command_cache_cleanup >/dev/null 2>&1; then
    util_command_cache_cleanup
  fi

  serversentry_log "INFO" "Startup optimizations completed"
}

# Function: display_system_status
# Description: Display system status for debug/status commands
# Parameters:
#   $1 - command being executed
display_system_status() {
  local command="$1"

  # Only display for status, help, or debug commands
  if [[ "$command" == "status" || "$command" == "help" || "$command" == "-d" || "$command" == "--debug" ]]; then
    serversentry_log "INFO" "=== ServerSentry v2 System Status ==="
    serversentry_log "INFO" "Base directory: $SERVERSENTRY_ROOT"

    # Only show advanced info if functions are available
    if declare -f logging_get_level >/dev/null 2>&1; then
      serversentry_log "INFO" "Log level: $(logging_get_level)"
    fi

    if declare -f config_get_value >/dev/null 2>&1; then
      serversentry_log "INFO" "Configuration loaded from: $(config_get_value 'config_file' 'default')"
      serversentry_log "INFO" "Config namespace: $(config_get_value 'namespace' 'config')"

      # Display enabled plugins (handle array properly)
      if declare -f config_get_array >/dev/null 2>&1; then
        local enabled_plugins
        enabled_plugins=$(config_get_array 'plugins.enabled' 2>/dev/null | tr '\n' ',' | sed 's/,$//')
        if [[ -n "$enabled_plugins" ]]; then
          serversentry_log "INFO" "Plugins enabled: $enabled_plugins"
        else
          serversentry_log "INFO" "Plugins enabled: none"
        fi
      fi

      serversentry_log "INFO" "Notifications enabled: $(config_get_value 'notifications.enabled' 'false')"
    fi

    serversentry_log "SUCCESS" "System initialized successfully"
  fi
}

# Main function with enhanced error handling and proper initialization
main() {
  # Initialize core system components in proper order
  if ! init_core_system; then
    echo "FATAL: Core system initialization failed" >&2
    exit 1
  fi

  serversentry_log "INFO" "Starting ServerSentry v2"

  # Initialize plugin system (non-fatal for now)
  if ! init_plugin_system; then
    serversentry_log "WARN" "Plugin system initialization failed - continuing with basic functionality"
  fi

  # Initialize notification system (non-fatal)
  if ! init_notification_system; then
    serversentry_log "INFO" "Continuing without notification support"
  fi

  # Initialize UI system (non-fatal for now)
  if ! init_ui_system; then
    serversentry_log "WARN" "UI system initialization failed - continuing with basic functionality"
  fi

  # Run startup optimizations
  run_startup_optimizations

  # Display system status for relevant commands
  local command="${1:-status}"
  display_system_status "$command"

  # Process command line arguments
  if declare -f process_commands >/dev/null 2>&1; then
    if ! process_commands "$@"; then
      serversentry_log "ERROR" "Command processing failed"
      exit 1
    fi
  else
    # Basic command processing fallback
    local command="${1:-status}"
    case "$command" in
    "status")
      serversentry_log "SUCCESS" "ServerSentry v2 is running"
      serversentry_log "INFO" "Bootstrap system: ✅ Working"
      serversentry_log "INFO" "Core libraries: ✅ Loaded"
      ;;
    "help" | "-h" | "--help")
      local mode_text="Standard Mode"
      if [[ "$MINIMAL_MODE" == "true" ]]; then
        mode_text="Minimal Mode"
      fi
      echo "ServerSentry v2 - $mode_text"
      echo "Available commands:"
      echo "  status    - Show system status"
      echo "  help      - Show this help"
      if [[ "$MINIMAL_MODE" != "true" ]]; then
        echo "  check     - Run system checks"
        echo "  start     - Start monitoring"
        echo "  stop      - Stop monitoring"
        echo "  restart   - Restart monitoring"
        echo "  logs      - View logs"
      fi
      echo ""
      echo "Options:"
      echo "  --minimal - Run in minimal mode (fewer features, more stable)"
      echo "  -v, --verbose - Verbose output"
      echo "  -q, --quiet   - Quiet output"
      ;;
    *)
      serversentry_log "ERROR" "Unknown command: $command"
      serversentry_log "INFO" "Use 'help' for available commands"
      exit 1
      ;;
    esac
  fi

  serversentry_log "SUCCESS" "ServerSentry v2 finished successfully"
}

# Function: cleanup
# Description: Cleanup function called on exit
cleanup() {
  local exit_code=$?

  if declare -f serversentry_log >/dev/null 2>&1; then
    serversentry_log "INFO" "Performing cleanup (exit code: $exit_code)"
  fi

  # Cleanup operations
  if declare -f util_command_cache_cleanup >/dev/null 2>&1; then
    util_command_cache_cleanup >/dev/null 2>&1
  fi

  # Log exit status
  if [[ "$exit_code" -ne 0 ]]; then
    if declare -f serversentry_log >/dev/null 2>&1; then
      serversentry_log "ERROR" "ServerSentry exited with error code: $exit_code"
    else
      echo "ERROR: ServerSentry exited with error code: $exit_code" >&2
    fi
  fi

  exit "$exit_code"
}

# Function: handle_signals
# Description: Handle various signals gracefully
handle_signals() {
  case "$1" in
  "INT")
    if declare -f serversentry_log >/dev/null 2>&1; then
      serversentry_log "WARN" "Received SIGINT, shutting down gracefully..."
    fi
    exit 130
    ;;
  "TERM")
    if declare -f serversentry_log >/dev/null 2>&1; then
      serversentry_log "WARN" "Received SIGTERM, shutting down gracefully..."
    fi
    exit 143
    ;;
  "HUP")
    if declare -f serversentry_log >/dev/null 2>&1; then
      serversentry_log "INFO" "Received SIGHUP, reloading configuration..."
    fi
    # Trigger configuration reload if available
    if declare -f config_load >/dev/null 2>&1; then
      config_load
    fi
    ;;
  esac
}

# Set up signal handlers
trap cleanup EXIT
trap 'handle_signals INT' INT
trap 'handle_signals TERM' TERM
trap 'handle_signals HUP' HUP

# Run the main function with all arguments
main "$@"
